//version = new ProjectVersion(0,1)
apply plugin: 'war' 
ext.versionFile=file 'version.properties'
	
	task first{
		doFirst{
			println 'first'
		}
	}
	
	task second(dependsOn:['first']){
		doFirst{
			println 'second'
		}
	}
	
	task third{
		doFirst{
		println 'third'
		}
	}
	
	task printVersion(dependsOn: ['second','first']){
		doLast{
			println "version ${version}"
		}
	}
	
	class ProjectVersion{
		Integer major
		Integer minor
		Boolean release
		
		ProjectVersion(Integer major, Integer minor){
			this(major,minor,Boolean.FALSE)
		}
		
		ProjectVersion(Integer major,Integer minor, Boolean release){
			this.major=major
			this.minor=minor
			this.release=release
		}
		
		@Override
		String toString(){
			return "${major}.${minor}.${release ? 'RELEASE':'SNAPSHOT'}"
		}
	}
	
	task loadVersion(){
			project.version = readVersion()
			//println "${project.version}"
	}
	
	ProjectVersion readVersion(){
			logger.quiet 'Reading the version file.'
			if (!versionFile.exists()){
				throw new GradleException("Required version file does not exist: $versionFile.canoniclaPath")
			}
			Properties versionProps = new Properties()
			
			versionFile.withInputStream { stream ->
				versionProps.load(stream)
			}
			
			new ProjectVersion(
			versionProps.major.toInteger(),
			versionProps.minor.toInteger(),
			versionProps.release.toBoolean()
			)
	}
	
		task makeReleaseVersion(group: 'Version',description:'Makes project a release version'){
			inputs.property ('release',version.release)
			outputs.file versionFile
			
			doLast{
				version.release = Boolean.TRUE
				
				ant.propertyfile(file:versionFile){
					entry(key:'release',type:'string',operation:'=',value:'true')
				}
			}
		}
		
		task makeSnapshotVersion(group: 'Version',description:'Makes project a release version'){
			doLast{
				version.release = Boolean.FALSE
				ant.propertyfile(file:versionFile){
					entry(key:'release',type:'string',operation:'=',value:'false')
				}
			}
		}
		
		task makeReleaseVersion2 (type:ReleaseVersionTask){
			release= project.version.release
			destFile=project.versionFile
		}
		
		class ReleaseVersionTask extends DefaultTask{
			@Input Boolean release
			@OutputFile File destFile
			
			ReleaseVersionTask(){
				group='Version'
				description='Makes project a release version'
			}
			
			@TaskAction
			void start(){
				project.version.release = Boolean.TRUE
				ant.propertyfile(file:project.versionFile){
					entry(key:'release',type:'string',operation:'=',value:'true')
				}
			}
		}
		
		task createDistribution(type:Zip,dependsOn:makeReleaseVersion2){
				from (war.outputs.files)
				from (sourceSets*.allSource){
					into 'src'
				}
				from (rootDir){
					include versionFile.name
				}
				
		}
		
		task backupDistribution(type:Copy){
			from createDistribution.outputs.files
			into "$buildDir/backup"
		}